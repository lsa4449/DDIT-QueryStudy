--2번
SELECT ename, hiredate 
FROM emp
WHERE hiredate > TO_DATE('19820101','YYYYMMDD') 
AND hiredate < TO_DATE('19830101','YYYYMMDD');

--WHERE 절에 기술하는 조건에 순서는 조회 결과에 영향을 미치지 않는다.
--SQL은 집합의 개념을 갖고 있다
--집합 : 키가 185cm이상이고 몸무게가 70kg이상인 사람들의 모임(순서가 바뀌어도 영향 x)
--잘생긴 사람의 모임 --> 집합이 아님.
--집합의 특징 : 집합에는 순서가 없다.
--(1, 5, 10) -> (10, 5, 1) : 서로 동일
--테이블에는 순서가 보장되지 않음
--SELECT 결과가 순서가 다르더라도 값이 동일하면 정답
-->정렬기능 제공 (ORDER BY)

--IN 연산자
--특정 집합에 포함되는지 여부를 확인
--부서번호가 10 혹은(OR) 20번에 속하는 직원 조회'
SELECT *
FROM emp
WHERE deptno IN (10, 20);
--OR연산자 이용
SELECT *
FROM emp
WHERE deptno = 10
OR    deptno = 20;

--emp테이블에서 사원이름이 SMITH, JONES인 직원만 조회 (empno, ename, deptno)
SELECT empno, ename, deptno
FROM emp
WHERE ename IN ('SMITH', 'JONES'); 

--3번
SELECT userid 아이디, usernm 이름, alias 별명
FROM users
WHERE userid IN ('brown', 'cony', 'sally');

--문자열 매칭 연산자 : LIKE, %, _
--위에서 연습한 조건은 문자열 일치에 대해서 다룸
--이름이 BR로 시작하는 사람만 조회/ 이름에 R 문자열이 들어가는 사람만 조회

--사원 이름이 S로 시작하는 사원만 조회(SMITH, SCOTT)
--% : 어떤 문자열(한글자, 글자 없을 수도 있고 여러 문자열이 올 수도 있다.)
SELECT *
FROM emp
WHERE ename LIKE 'S%';

--글자수를 제한한 매턴 매칭
--_정확히 한 문자
--직원 이름이 S로 시작하고 이름의 전체 길이가 5글자 인 직원(S____)
SELECT *
FROM emp
WHERE ename LIKE 'S____';

--사원 이름에 S글자가 들어가는 사원 조회
SELECT *
FROM emp
WHERE ename LIKE '%S%';

--4번
SELECT *
FROM emp
WHERE ename LIKE 'S____';

--5번
SELECT mem_id, mem_name
FROM member
WHERE mem_name LIKE '%이%';

--null 비교 연산자 (IS)
--comm 컬럼의 값이 null인 데이터를 조회 (WHERE comm = null)
SELECT *
FROM emp
WHERE comm = '';

--6번
SELECT *
FROM emp
WHERE comm IS NOT null;

--사원의 관리자가 7698, 7839 그리고 null이 아닌 직원만 조회
--NOT IN 연산자에는 null 값을 포함 시키면 안된다
SELECT *
FROM emp
WHERE mgr NOT IN (7698, 7839)
AND mgr IS NOT NULL;

--7번
SELECT *
FROM emp
WHERE job = 'SALESMAN' 
AND hiredate >= to_date(19810601,'yyyymmdd');

--8번
SELECT *
FROM emp
WHERE deptno <> 10
AND hiredate >= to_date(19810601,'yyyymmdd');

--9번
SELECT *
FROM emp
WHERE deptno NOT IN (10)
AND hiredate >= to_date(19810601,'yyyymmdd');

--10번
SELECT *
FROM emp
WHERE deptno IN (20, 30)
AND hiredate >= to_date(19810601,'yyyymmdd');

--11번
SELECT *
FROM emp
WHERE job = 'SALESMAN' 
OR hiredate >= to_date(19810601,'yyyymmdd');

--12번
SELECT *
FROM emp
WHERE job = 'SALESMAN' 
OR empno LIKE '78%'; -- 형변환

--13번
SELECT *
FROM emp
WHERE job = 'SALESMAN' 
OR empno > 7800 
AND empno < 7900;

--연산자 우선순위
--*, / 연산자가 +,-보다 우선순위가 높다 
--우선순위 변경 : () 
--AND > OR 

--emp 테이블에서 사원 이름이 SMITH 이거나 ALLEN이면서 
--    담당업무가 SALESMAN인 사원 조회
SELECT ename 이름 , job 담당업무
FROM emp
WHERE ename = 'SMITH' 
OR ename = 'ALLEN'
AND job = 'SALESMAN';

--emp 테이블에서 사원 이름이 SMITH 이거나 ALLEN이면 
--    담당업무가 SALESMAN인 사원 조회
SELECT ename 이름 , job 담당업무
FROM emp
WHERE ename IN ('SMITH','ALLEN')
AND job = 'SALESMAN';

SELECT ename 이름 , job 담당업무
FROM emp
WHERE (ename = 'SMITH' OR ename = 'ALLEN')
AND job = 'SALESMAN';

--14번
SELECT *
FROM emp
WHERE job = 'SALESMAN' 
OR empno LIKE '78%'
AND hiredate >= to_date('19810601','yyyymmdd');

--정렬
--SELECT *
--FROM emp
--WHERE  
--order by [칼럼|별칭|컬럼인덱스 [ASC | DESC}, ...}  

--emp 테이블의 모든 사원을 ename 컬럼 값을 기준으로 오름차순 정렬한 결과를 조회
SELECT *
FROM emp
ORDER BY ename ASC; --ASC는 기본이기 때문에 적용하지 않아도 됨

--emp 테이블의 모든 사원을 ename 컬럼 값을 기준으로 내림차순 정렬한 결과를 조회
SELECT *
FROM emp
ORDER BY ename DESC; 

--다른 의미의 DESC
DESC emp; -- DESCRIBE
ORDER BY ename DESC -- DESENDING

--emp 테이블에서 사원 정보를 ename 컬럼으로 내림차순, 
-- ename 값이 같을 경우 mgr 컬럼으로 오름차순 정렬하는 쿼리 작성

SELECT *
FROM emp
ORDER BY ename DESC, mgr;

--정렬시 별칭을 사용
SELECT empno, ename nm, sal*12 year_sal
FROM emp
ORDER BY nm;

--컬럼 인덱스로 정렬
--java array[0]
--SQL COLUMN INDEX : 1부터 시작
SELECT empno, ename nm, sal*12 year_sal
FROM emp
ORDER BY 3;

--ORDER BY 1번
SELECT *
FROM dept
ORDER BY dname;

SELECT *
FROM dept
ORDER BY loc DESC;

--2번
SELECT *
FROM emp
WHERE comm > 0 
ORDER BY comm DESC, empno; 

--3번
SELECT *
FROM emp
WHERE mgr IS NOT NULL  
ORDER BY job, empno DESC; 

--4번
SELECT *
FROM emp
WHERE deptno IN (10, 30) 
AND sal > 1500
ORDER BY ename DESC;