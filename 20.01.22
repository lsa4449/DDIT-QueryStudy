-- PROD 테이블의 모든 컬럼의 자료 조회
SELECT * FROM prod;


-- PROD 테이블에서 PROD_ID, PROD_NAME 컬럼의 자료만 조회
SELECT prod_id, prod_name FROM prod;

--1번
SELECT * FROM lprod;
--2번
SELECT buyer_id, buyer_name FROM buyer;
--3번
SELECT * FROM cart;
--4번
SELECT mem_id, mem_pass ,mem_name FROM member;


--users 테이블의 모든 행에 대해서 조회 (5건의 데이터가 존재)
SELECT * FROM users;

SELECT usernm FROM users;
--테이블에 어떤 컬럼이 있는지 확인하는 방법
-- 1. SELECT *
-- 2. TOOL 기능 (사용자 - TABLES)
-- 3. DESC 테이브명 (DESCRIBE)

DESC USERS;

--users 테이블에서 userid, usernm, reg_dt 컬럼만 조회하는 sql문 작성
--날짜 연산 (reg_dt 컬럼은 date정보를 담을 수 있는 타입)
--SQL 날짜 컬럼 + (더하기 연산) 
--수학적인 사칙 연산이 아닌 것 들 (5+5)
--String h = "hello"; String w = "world";
--String hw = h+w; -> 자바에서는 두 문자열을 결합!
--SQL에서 정의된 날짜 연산 : 날짜 + 정수 = 날짜에서 정수를 일자로 취급하여 더한 날짜가 됨
--ex (2019/01/28 + 5 \ 2019/02/02)
--reg_dt : 등록일자 컬럼 (reg_dt + 5 = 컬럼이 아닌 표현식)
--null : 값을 모르는 상태
--null에 대한 연산 결과는 항상 null(자바는 상관x)

SELECT userid u_id, usernm, reg_dt, 
        reg_dt + 5 AS reg_dt_after_5day 
FROM users;

--1번
SELECT prod_id id, prod_name name 
FROM prod;
--2번
SELECT lprod_gu gu, lprod_nm nm 
FROM lprod;
--3번
SELECT buyer_id 바이어아이디, buyer_name 이름 
FROM buyer;

--문자열 결합
--자바 언어에서 문자열 결합 : + ("Hello" + "world")
--sql에서 문자열 결합 : || ('Hello' || 'world')
--sql에서 문자열 결합 : concat ('Hello' , 'world')
--userid, usernm 컬럼을 결합, 별칭 id_name

SELECT userid || usernm id_name
    ,concat(userid, usernm) 
FROM users;

--변수, 상수
--int a =5; String msg = "hello world";
--System.out.println(msg); ->변수를 이용한 출력
--System.out.println("hello world"); ->상수를 이용한 출력
--sql에서의 변수는 없음(컬럼이 비슷한 역할, pl/sql에는 존재)
--sql에서 문자열 상수는 싱글 쿼테이션으로 표현
-- "hello, world" ->'hello, world'
--문자열 상수와 컬럼간의 결합
SELECT 'user id : '|| userid AS "user id"
FROM users;

SELECT 'SELECT * FROM '|| table_name ||';' QUERY  
FROM user_tables;

--CONCAT
SELECT CONCAT(CONCAT('SELECT * FROM' ,table_name),';') QUERY  
FROM user_tables;

--int a = 5; 할당, 대입 연산자
--if ( a == 5 ) (a의 값이 5인지 비교)
--sql == -> equal
--sql에서는 대입의 개념이 없다(PL/SQL)

--WHERE 절: 테이블에서 데이터를 조회할 때 조건에 맞는 행만 조회
--brown, 'brown' 구분
--컬럼, 문자열 상수
SELECT *
FROM users
WHERE userid = 'brown'; 

--userid가 brown이 아닌 행만 조회
--같을 때 : =, 다를 때 : !=, <>
SELECT *
FROM users
WHERE userid != 'brown'; 

--EMP 테이블에 존재하는 컬럼확인
DESC emp;
--emp 테이블에서 ename 컬럼 값이 JONES인 행만 조회
--컬럼의 값이나 문자열 상수는 대소문자를 가린다
-- 'JONES', 'jones'는 값이 다른 상수
SELECT *
FROM emp
WHERE ename = 'JONES'; 

--emp 테이블에서 deptno(부서번호)가 30보다 크거나 같은 사원들만 조회
SELECT *
FROM emp
WHERE deptno >= 30; 

--문자열 : '문자열'
--숫자 : 1
--날짜 : 함수랑 문자열 결합!
--문자열만 이용하여 표현 가능(권장x)
--국가별로 날짜 표기 방법이 다름
--한국 : 년도4자리/월2자리/일자2자리
--미국 : 월2자리/일자2자리/년도4자리

--입사일자가 1980년 12월 17일 직원만 조회
--TO_DATE : 문자열을 date 타입으로 변경하는 함수
--TO_DATE(날짜형식 문자열, 첫 번째 인자의 형식)
--'1980/02/03'

SELECT *
FROM emp
WHERE ename = 'JONES';

--범위 연산
--sal 컬럼의 값이 1000~2000사이 인사람
SELECT * 
FROM emp
WHERE sal>=1000 
AND sal<2000;

--범위 연산자를 부등호 대신에 BTWEEN AND 연산자로 대체
SELECT * 
FROM emp
WHERE sal BETWEEN 1000 AND 2000;

--WHERE 1번
SELECT ename, hiredate 
FROM emp
WHERE hiredate 
BETWEEN TO_DATE('19820101','YYYYMMDD') 
AND TO_DATE('19830101','YYYYMMDD');


