--DECODE 1번
SELECT empno, ename, 
        DECODE(deptno, '10', 'ACCOUNTING'
                     , '20', 'RESEARCH'
                     , '30', 'SALES'
                     , '40', 'OPERATIONS','DDIT') DNAME
FROM emp;

--올해년도가 짝수이면 입사년도가 짝수일 때 건강검진 대상자, 홀수면 비대상자
--올해년도가 홀수이면 입사년도가 짝수일 때 건강검진 대상자, 짝수면 비대상자
--DATE타입 -> 문자열(여러가지 포맷, YYYY-MM-DD HH24:MI:SS)
--짝수 -> 짝%2==0
--홀수 -> 홀%2==1
--2번
SELECT empno, ename, hiredate,
        DECODE(MOD(TO_NUMBER(TO_CHAR(hiredate,'YY')),2),
               MOD(TO_NUMBER(TO_CHAR(hiredate,'YY')),2),
                 '건강검진 대상자', '건강검진 비대상자') CONTACT_TO_DOCTER
FROM emp;

--3번
SELECT userid, usernm, alias, reg_dt,
        DECODE(TO_NUMBER(TO_CHAR(reg_dt,'YY')),19,               
                '건강검진 대상자', '건강검진 비대상자') CONTACT_TO_DOCTER
FROM users;

SELECT empno, ename, hiredate,
        CASE
            WHEN MOD(TO_NUMBER(TO_CHAR(HIREDATE,'YY')),2)=0 THEN '건강검진 대상자'
            WHEN MOD(TO_NUMBER(TO_CHAR(HIREDATE,'YY')),2)=1 THEN '건강검진 비대상자'
        END CONTACT_TO_DOCTER
      
FROM emp;

--GROUP BY 행을 묶을 기준
--부서번호 같은 ROW끼리 묶는 경우 : GROUP BY deptno
--담당업무가 같은 ROW끼리 묶는 경우 : GROUP BY job
--mgr가 같고 담당업무가 같은 ROW끼리 묶는 경우 : GROUP BY mgr, job

--그룹함수의 종류
--SUM : 합계
--COUNT : 갯수
--MAX : 최대값
--MIN : 최소값
-- AVG : 평균
--해당 컬럼에 Null값을 갖는 ROW가 존재할 경우 해당 값은 무시하고 계산한다.
--(null연산의 결과는 null)

--부서별 급여 합
SELECT deptno, ename,
        SUM(sal) sum_sal, MAX(sal) max_sal, MIN(sal) min_sal, 
        ROUND(AVG(sal),2) avg_sal, COUNT(sal) count_sal
FROM emp
GROUP BY deptno, ename;

--그룹함수 주의점
--GROUP BY 절에 나온 컬럼 이외의 다른 컬럼이 SELECT절에 표현되면 에러
SELECT deptno, ename
FROM emp
GROUP BY deptno, ename;

--GROUP BY 절이 없는 상태에서 그룹함수를 사용한 경우
-- --> 전체 행을 하나의 행으로 묶는다
SELECT SUM(sal) sum_sal, MAX(sal) max_sal, MIN(sal) min_sal, 
        ROUND(AVG(sal),2) avg_sal, 
        COUNT(sal) count_sal, --sal 컬럼의 값이 null이 아닌 row의 갯수
        COUNT(comm), --comm 컬럼의 값이 null이 아닌 row의 갯수
        COUNT(*) --몇 건의 데이터가 있는지
FROM emp;

--GROUP BY의 기준이 empno이면 결과수가 몇 건?
--그룹화와 관련없는 임의의 문자열, 함수, 숫자 등은 SELECT절에 나오는 것이 가능
SELECT 1, SYSDATE, 'ACCOUNTING', SUM(sal) sum_sal, MAX(sal) max_sal, MIN(sal) min_sal, 
        ROUND(AVG(sal),2) avg_sal, 
        COUNT(sal) count_sal, --sal 컬럼의 값이 null이 아닌 row의 갯수
        COUNT(comm), --comm 컬럼의 값이 null이 아닌 row의 갯수
        COUNT(*) --몇 건의 데이터가 있는지
FROM emp
GROUP BY empno;

--SINGLE ROW FUNCTION의 경우 WHERE절에서 사용하는 것이 가능하나
--MULTI ROW FUNCTION(GROUP FUNCTION)의 경우 WHERE절에서 사용하는 것이 불가능하고 
--HAVING 절에서 조건을 기술한다

--부서별 급여 합 조회, 단 급여함이 9000이상인 row만 조회
SELECT deptno, SUM(sal) sum_sal
FROM emp
GROUP BY deptno
HAVING SUM(sal) > 9000;

--GROUP BY 1번
SELECT MAX(sal) max_sal, MIN(sal) min_sal, 
       ROUND(AVG(sal),2) avg_sal, 
       SUM(sal) sum_sal,   
       COUNT(sal) count_sal, 
       COUNT(mgr) count_mgr, 
       COUNT(*) count_all  
FROM emp;

--2번
SELECT deptno, MAX(sal) max_sal, MIN(sal) min_sal, 
       ROUND(AVG(sal),2) avg_sal, 
       SUM(sal) sum_sal,   
       COUNT(sal) count_sal, 
       COUNT(mgr) count_mgr, 
       COUNT(*) count_all  
FROM emp
GROUP BY deptno;

--3번
SELECT DECODE(deptno, '10', 'ACCOUNTING'
                     , '20', 'RESEARCH'
                     , '30', 'SALES') DNAME, 
       MAX(sal) max_sal, MIN(sal) min_sal, 
       ROUND(AVG(sal),2) avg_sal, 
       SUM(sal) sum_sal,   
       COUNT(sal) count_sal, 
       COUNT(mgr) count_mgr, 
       COUNT(*) count_all  
FROM emp
GROUP BY deptno
ORDER BY deptno;
--GROUP BY DECODE (deptno, '10', 'ACCOUNTING', '20', 'RESEARCH', '30', 'SALES');
--ORDER BY deptno (deptno, '10', 'ACCOUNTING', '20', 'RESEARCH', '30', 'SALES');


--4번
--ORACLE 9i 이전 까지는 GROUP BY 절에 기술한 컬럼으로 정렬을 보장
--ORACLE 10G 이후 부터는 GROUP BY 절에 기술한 컬럼으로 정렬을 보장하지 않는다. (GROUP BY 연산자 속도 up)
SELECT TO_CHAR(hiredate,'YYYYMM') HIRE_YYYYMM, COUNT(*) CNT
FROM emp
GROUP BY TO_CHAR(hiredate,'YYYYMM')
ORDER BY TO_CHAR(hiredate,'YYYYMM');

--5번
SELECT TO_CHAR(hiredate,'YYYY') HIRE_YYYYMM, COUNT(*) CNT
FROM emp
GROUP BY TO_CHAR(hiredate,'YYYY');

--6번
SELECT COUNT(*) cnt
FROM dept;

--7번
SELECT COUNT(COUNT(*)) cnt
FROM emp
GROUP BY deptno;